AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: aws sam sample application
Parameters:
  Stage:
    Type: String
    Default: production
    Description: Stage to deploy resources to
    AllowedValues:
    - staging
    - production
  OrganizationParam:
    Type: String
    Default: test_organization
    Description: Name of the orgaization
Conditions:
  IsProduction:
    Fn::Equals:
    - Ref: Stage
    - production
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: nodejs14.x
    Architectures:
    - x86_64
    MemorySize: 128
    Timeout: 5
    Tracing: Active
    Tags:
      project: aws-sam-example
      environment:
        Ref: Stage
Resources:
  ApiGwAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayLoggingRole
        - Arn
    Metadata:
      SamResourceId: ApiGwAccountConfig
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    Metadata:
      SamResourceId: ApiGatewayLoggingRole
  ApiGatewayEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: models-api-${Stage}
      StageName:
        Ref: Stage
      MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: /*
        HttpMethod: '*'
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS:
          Ref: Stage
      Auth:
        ApiKeyRequired: false
        AddDefaultAuthorizerToCorsPreflight: true
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: GatewayAuthorization
      Cors:
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowCredentials: '''*'''
    Metadata:
      SamResourceId: ApiGatewayEndpoint
  PatientSaveHandelerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appPatient.saveHandler
      Environment:
        Variables:
          PATIENT_TABLE_NAME:
            Ref: DynamodbPatientTable
      Events:
        ModelPostAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayEndpoint
            Path: /patient
            Method: POST
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbPatientTable}
    Metadata:
      SamResourceId: PatientSaveHandelerFunction
  PatientGetHandelerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appPatient.getHandler
      Environment:
        Variables:
          PATIENT_TABLE_NAME:
            Ref: DynamodbPatientTable
      Events:
        ModelPostAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayEndpoint
            Path: /patient/{id}
            Method: GET
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbPatientTable}
    Metadata:
      SamResourceId: PatientGetHandelerFunction
  PatientGetAllHandelerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appPatient.getAllHandler
      Environment:
        Variables:
          PATIENT_TABLE_NAME:
            Ref: DynamodbPatientTable
      Events:
        ModelPostAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayEndpoint
            Path: /patient/all
            Method: GET
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:scan
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbPatientTable}
    Metadata:
      SamResourceId: PatientGetAllHandelerFunction
  PatientDeleteHandelerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appPatient.deleteHandler
      Environment:
        Variables:
          PATIENT_TABLE_NAME:
            Ref: DynamodbPatientTable
      Events:
        ModelPostAPI:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayEndpoint
            Path: /patient/{id}
            Method: DELETE
      Policies:
      - AWSLambdaExecute
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:DeleteItem
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamodbPatientTable}
    Metadata:
      SamResourceId: PatientDeleteHandelerFunction
  DynamodbPatientTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: patient_table
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
    Metadata:
      SamResourceId: DynamodbPatientTable
  S3SignedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appS3Signed.handler
      Environment:
        Variables:
          UploadBucket:
            Ref: S3OriginalImageBucket
      Policies:
      - S3WritePolicy:
          BucketName:
            Ref: S3OriginalImageBucket
      - Statement:
        - Effect: Allow
          Resource:
            Fn::Sub: arn:aws:s3:::${S3OriginalImageBucket}/
          Action:
          - s3:putObjectAcl
      Events:
        UploadAssetAPI:
          Type: Api
          Properties:
            Path: /s3/signed-path/{ref}
            Method: get
            RestApiId:
              Ref: ApiGatewayEndpoint
    Metadata:
      SamResourceId: S3SignedFunction
  ThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://aws-sam-cli-managed-default-samclisourcebucket-6975gf9s18dj/c401c79e89b8b1fc4544ac0970b25d85
      Handler: appThumbnail.handler
      Environment:
        Variables:
          ThumnilBucket:
            Ref: S3ThumnilImageBucket
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: S3OriginalImageBucket
            Events: s3:ObjectCreated:*
    Metadata:
      SamResourceId: ThumbnailFunction
  S3OriginalImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          AllowedOrigins:
          - '*'
    Metadata:
      SamResourceId: S3OriginalImageBucket
  S3ThumnilImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - HEAD
          AllowedOrigins:
          - '*'
    Metadata:
      SamResourceId: S3ThumnilImageBucket
  S3AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    Metadata:
      SamResourceId: S3AppBucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${S3AppBucket}/*
      Bucket:
        Ref: S3AppBucket
    Metadata:
      SamResourceId: BucketPolicy
Outputs:
  ApiGatewayEndpointId:
    Description: ApiGatewayEndpoint ID
    Value:
      Ref: ApiGatewayEndpoint
  ApiKey:
    Description: 'You can find your API Key in the AWS console: (Put in the request
      HEADER as ''x-api-key'')'
    Value:
      Fn::Sub: https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${ApiGatewayEndpointApiKey}
  ApiGatewayEndpointUrl:
    Description: ApiGatewayEndpoint endpoint URL for
    Value:
      Fn::Sub: https://${ApiGatewayEndpoint}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/
  S3OriginalImageBucketName:
    Description: S3 bucket for application uploads
    Value:
      Ref: S3OriginalImageBucket
  S3ThumnilImageBucket:
    Description: S3 bucket for application uploads
    Value:
      Ref: S3ThumnilImageBucket
  WebsiteURL:
    Value:
      Fn::GetAtt:
      - S3AppBucket
      - WebsiteURL
    Description: URL for website hosted on S3
