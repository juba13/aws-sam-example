AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  sam-test-2

Parameters:
  Stage:
    Type: String
    Default: production
    Description: Stage to deploy resources to
    AllowedValues:
      - staging
      - production

Conditions:
  IsProduction: !Equals [ !Ref Stage, production ]

Globals:
  Api:
    OpenApiVersion: 3.0.1 
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 5
    Tracing: Active
    Tags:
      project: aws-sam-example  
      environment: !Ref Stage

Resources:
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
      
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        
  ApiGatewayEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "models-api-${Stage}"
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Auth:
        ApiKeyRequired: false
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: GatewayAuthorization   
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        AllowCredentials: "'*'"      


  ModelHandelerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: dist/
      Handler: app.modelHandler
      Events:
        ModelPostAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayEndpoint
            Path: /model/{modelName}
            Method: POST
        ModelUpdateAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayEndpoint
            Path: /model/{modelName}
            Method: PUT
        ModelGetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayEndpoint
            Path: /model/{modelName}/{modelId}
            Method: GET
        ModelDeleteAPI:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayEndpoint
            Path: /model/{modelName}/{modelId}
            Method: DELETE  
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref dynamodbPatientTable  

  dynamodbPatientTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName: dynamodbPatientTable      

  UploadRequestFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: dist/
      Handler: app.assetHandler
      Environment:
        Variables:
          UploadBucket: !Ref S3UploadBucket  
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3UploadBucket
        ## This permission allows the Lambda function to request signed URLs
        ## for objects that will be publicly readable. Uncomment if you want this ACL.
        # - Statement:
        #   - Effect: Allow
        #     Resource: !Sub 'arn:aws:s3:::${S3UploadBucket}/'
        #     Action:
        #       - s3:putObjectAcl
      Events:
        UploadAssetAPI:
          Type: Api
          Properties:
            Path: /asset/uploads
            Method: get
            RestApiId: !Ref ApiGatewayEndpoint   

        UploadAssetAPIOption:
          Type: Api
          Properties:
            Path: /asset/uploads
            Method: OPTIONS
            RestApiId: !Ref ApiGatewayEndpoint      
   

  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - GET
            - PUT
            - HEAD
          AllowedOrigins:
            - "*"

  S3AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3AppBucket}/*
      Bucket: !Ref S3AppBucket


Outputs:
  ApiGatewayEndpointId:
    Description: "ApiGatewayEndpoint ID"
    Value: !Ref ApiGatewayEndpoint

  ApiKey:
      Description: "You can find your API Key in the AWS console: (Put in the request HEADER as 'x-api-key')"
      Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${ApiGatewayEndpointApiKey}"

  ApiGatewayEndpointUrl:
    Description: "ApiGatewayEndpoint endpoint URL for"
    Value: !Sub 'https://${ApiGatewayEndpoint}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/'

  S3UploadBucketName:
    Description: "S3 bucket for application uploads"
    Value: !Ref 'S3UploadBucket'   

  WebsiteURL:
    Value: !GetAtt S3AppBucket.WebsiteURL
    Description: URL for website hosted on S3   
